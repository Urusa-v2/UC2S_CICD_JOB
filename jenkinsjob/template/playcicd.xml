<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1254.v3f64639b_11dd">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2118.v31fd5b_9944b_5"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2118.v31fd5b_9944b_5">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty plugin="gitlab-plugin@1.6.0">
      <gitLabConnection></gitLabConnection>
      <jobCredentialId></jobCredentialId>
      <useAlternativeCredential>false</useAlternativeCredential>
    </com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.34">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.10">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3536.vb_8a_6628079d5">
    <script>pipeline {
    environment {
        PATH=&quot;$PATH:/usr/local/bin/&quot;
    }
  agent any

  stages {
        stage(&apos;workspace clear1&apos;){
            steps {
                cleanWs()
            }
        }
        stage(&apos;Git Clone Application&apos;) {
            steps {
                sh &quot;git clone setgitrepoaddr .&quot;
                }
        }
        stage(&apos;Building image&apos;) {
            steps {
                    sh &quot;docker build -t setecrreponame .&quot;
                }
        }
        stage(&apos;Push Image&apos;) {
            steps{
                withEnv([&quot;AWS_ACCESS_KEY_ID=setawsaccesskeyid&quot;,
                         &quot;AWS_SECRET_ACCESS_KEY=setawssecretkey&quot;,
                         &quot;AWS_DEFAULT_REGION=setregion&quot;]) {
                    script {
                        sh &quot;aws ecr get-login-password --region setregion | docker login --username AWS --password-stdin setecrreponame&quot;
                        sh &quot;docker push setecrreponame&quot;
                    }
                }
            }
        }

        stage(&apos;Deploy Application&apos;) {
            steps {
                    withEnv([&quot;AWS_ACCESS_KEY_ID=setawsaccesskeyid&quot;,
                         &quot;AWS_SECRET_ACCESS_KEY=setawssecretkey&quot;,
                         &quot;AWS_DEFAULT_REGION=setregion&quot;]) {
                        script{
                            sh &quot;kubectl apply -f .&quot;
                        }
                    }
                }

        }

    }
}

def  executeCmdReturn(cmd){
  return sh(returnStdout: true, script: cmd).trim()
}

def replaceText(str){
    return str.replaceAll(&apos;&quot;&apos;,&apos;&apos;)
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>
